name: Android emulator
on:
  workflow_dispatch:
    
env:
  # You can use a directory within the workspace for the Android SDK.
  ANDROID_HOME: ${{ github.workspace }}/android-sdk
  ANDROID_ARCH: x86_64
  ANDROID_TARGET: google_apis_playstore
  API_LEVEL: 33
  ANDROID_BUILD_TOOLS_VERSION: 33.0.2
  # Use an x86_64 system image now
  ANDROID_SDK_PACKAGES: system-images;android-33;google_apis_playstore;x86_64 platforms;android-33 build-tools;33.0.2 platform-tools emulator
  EMULATOR_TIMEOUT: 350
  EMULATOR_NAME: nexus

jobs:
  playwright-emulator:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        
      - name: Install Android Command Line Tools
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          # Add required directories to the PATH
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_HOME/emulator" >> $GITHUB_PATH

      - name: Install SDK
        run: |
          yes | sdkmanager --licenses
          sdkmanager --install ${ANDROID_SDK_PACKAGES}
  
      - name: Create AVD
        run: |
          # Create the AVD using the x86_64 ABI.
          echo "no" | avdmanager --verbose create avd --force -n $EMULATOR_NAME --abi "x86_64" -k "system-images;android-${API_LEVEL};${ANDROID_TARGET};${ANDROID_ARCH}"
          
      - name: Launch emulator
        run: |
          # Launch the emulator headlessly (without window, audio, boot animation, or snapshots)
          $ANDROID_HOME/emulator/emulator -avd $EMULATOR_NAME -no-window -no-audio -no-boot-anim -no-snapshot -gpu swiftshader_indirect &
      
      - name: Wait for emulator to boot
        run: |
          adb wait-for-device
          bootcompleted=$(adb shell getprop sys.boot_completed | tr -d '\r')
          while [ "$bootcompleted" != "1" ]; do
            echo "Waiting for emulator to boot... (sys.boot_completed = $bootcompleted)"
            sleep 5
            bootcompleted=$(adb shell getprop sys.boot_completed | tr -d '\r')
          done
          echo "Emulator booted successfully!"
